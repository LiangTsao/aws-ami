#!/bin/bash
#
# Configure and run Nomad on an AWS EC2.
#
# This script is expected to be run as "root" via EC2 User Data.
#

set -e

# =============================================================================

readonly SCRIPT_NAME="$(basename "$0")"

readonly NOMAD_USER="nomad"
readonly NOMAD_INSTALL_PATH="/opt/nomad"
readonly NOMAD_CONFIG_FILE="default.hcl"

readonly CONSUL_KV_NOMAD_REPLICATION_TOKEN="nomad/config/acl/replication_token"

readonly DOCKER_AUTH_CONFIG_FILE="/etc/docker-auth.json"

readonly EC2_INSTANCE_METADATA_URL="http://169.254.169.254/latest/meta-data"
readonly EC2_INSTANCE_DYNAMIC_DATA_URL="http://169.254.169.254/latest/dynamic"

# cloud-init/mount-nvme-instance-store
readonly INSTANCE_STORE="/mnt/ephemeral"

# =============================================================================

function print_usage {
  echo
  echo "Usage: run-nomad [OPTIONS]"
  echo
  echo "This script is used to configure and run Nomad on an AWS server."
  echo
  echo "Options:"
  echo
  echo -e "  --server\t\t\tIf set, run in server mode. Optional. At least one of --server or --client must be set."
  echo -e "  --client\t\t\tIf set, run in client mode. Optional. At least one of --server or --client must be set."
  echo -e "  --num-servers\t\t\tThe number of servers to expect in the Nomad cluster. Required if --server is true."
  echo -e "  --scheduler-algorithm\t\tThe default algorithm to schedule jobs. Optional if --server is true. Can be \"binpack\" or \"spread\". Defaults to \"binpack\"."
  echo -e "  --authoritative-region\tSpecifies the authoritative region. Optional if --server is true. By default, the local region is assumed to be authoritative."
  echo -e "  --node-class\t\t\tThe node_class of nomad client. Optional if --client is true."
  echo -e "  --meta\t\t\tThe meta of nomad client. Optional if --client is true. Provide key=value,key=value... format string."
  echo -e "  --host-volumes\t\tHost volumes to be made available to jobs. Optional if --client is true. Format is name:path:owner:group:read_only,..."
  echo
  echo "Example:"
  echo
  echo "  run-nomad --server --num-servers 3"
  echo "  run-nomad --client --node-class proxy"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function lookup_path_in_instance_metadata {
  local readonly path="$1"
  curl --silent --location "$EC2_INSTANCE_METADATA_URL/$path/"
}

function lookup_path_in_instance_dynamic_data {
  local readonly path="$1"
  curl --silent --location "$EC2_INSTANCE_DYNAMIC_DATA_URL/$path/"
}

function get_instance_ip_address {
  lookup_path_in_instance_metadata "local-ipv4"
}

function get_instance_id {
  lookup_path_in_instance_metadata "instance-id"
}

function get_instance_availability_zone {
  lookup_path_in_instance_metadata "placement/availability-zone"
}

function get_instance_region {
  lookup_path_in_instance_metadata "placement/region"
}

function get_aws_account_id {
  lookup_path_in_instance_dynamic_data "instance-identity/document" | jq -r ".accountId"
}

function get_aws_domain_name {
  local readonly region="$1"
  if [[ $region == cn-* ]]; then
    echo "amazonaws.com.cn"
  else
    echo "amazonaws.com"
  fi
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

# Prefer NVMe instance store (if available) as Nomad data dir
# https://www.nomadproject.io/guides/install/production/requirements.html
function prepare_nomad_data_dir {
  local readonly ebs_data_dir="$NOMAD_INSTALL_PATH/data"
  local readonly instance_store_data_dir="$INSTANCE_STORE/nomad"
  local readonly user="$1"
  if [[ -d "$INSTANCE_STORE" ]]; then
    log_info "Nomad will use data_dir: $instance_store_data_dir"
    mkdir -p "$instance_store_data_dir"
    chown "$user:$user" "$instance_store_data_dir"
    echo "$instance_store_data_dir"
  else
    # Already created in install-nomad
    log_info "Nomad will use data_dir: $ebs_data_dir"
    echo "$ebs_data_dir"
  fi
}

# About authoritative_region and replication_token:
# Each server in authoritative region: authoritative_region=""
# Each server in non-authoritative region needs replication_token to mirror the policies and tokens into the local region from authoritative_region
# This script assumes that:
#   1. AWS regions are mapped as Nomad regions, as well as Consul datacenters
#   2. replication_token has already been written in specified key of Consul KV store, at authoritative region
# Read the following links for more details:
#   https://learn.hashicorp.com/tutorials/nomad/access-control#multi-region-configuration
#   https://learn.hashicorp.com/tutorials/nomad/access-control-bootstrap#configure-for-multiple-regions
#   https://www.nomadproject.io/docs/configuration/server#authoritative_region
#   https://www.nomadproject.io/docs/configuration/acl#replication_token
function get_replication_token_from_consul {
  local readonly authoritative_region="$1"
  local readonly consul_kv_key="$2"
  local replication_token=""
  if [[ -n "$authoritative_region" ]]; then
    replication_token=$(consul kv get -datacenter="$authoritative_region" "$consul_kv_key")
  fi
  echo "$replication_token"
}

function generate_docker_auth_config {
  local readonly region="$1"
  local readonly config_path="$2"

  local readonly account=$(get_aws_account_id)
  local readonly domain=$(get_aws_domain_name "$region")

  local readonly ecr_endpoint="$account.dkr.ecr.$region.$domain"
  cat > "$config_path" <<EOF
{
  "credHelpers": {
    "$ecr_endpoint": "ecr-login"
  }
}
EOF
}

function generate_nomad_config {
  local readonly server="${1}"
  local readonly client="${2}"
  local readonly num_servers="${3}"
  local readonly scheduler_algorithm="${4}"
  local readonly authoritative_region="${5}"
  local readonly node_class="${6}"
  local readonly config_dir="${7}"
  local readonly data_dir="${8}"
  local readonly user="${9}"
  local readonly meta="${10}"
  local readonly host_volumes="${11}"
  local readonly config_path="$config_dir/$NOMAD_CONFIG_FILE"

  local instance_id=""
  local instance_ip_address=""
  local instance_region=""
  local instance_availability_zone=""

  instance_id=$(get_instance_id)
  instance_ip_address=$(get_instance_ip_address)
  instance_region=$(get_instance_region)
  availability_zone=$(get_instance_availability_zone)

  local server_config=""
  if [[ "$server" == "true" ]]; then
    local readonly replication_token=$(get_replication_token_from_consul "$authoritative_region" "$CONSUL_KV_NOMAD_REPLICATION_TOKEN")
    # Increase http_max_conns_per_client to 1000 (defaults to 100)
    # https://www.nomadproject.io/docs/configuration#http_max_conns_per_client
    # This workarounds error from Nginx when many Nomad Web UI is open
    # (most of TCP connections to Nomad HTTP API are caused by blocking query from Web UI)
    # recv() failed (104: Connection reset by peer) while reading response header from upstream
    server_config=$(cat <<EOF
limits {
  http_max_conns_per_client = 1000
}

server {
  enabled = true
  raft_protocol = 3
  bootstrap_expect = $num_servers
  authoritative_region = "$authoritative_region"
  default_scheduler_config {
    scheduler_algorithm = "$scheduler_algorithm"
    preemption_config {
      system_scheduler_enabled  = true
      batch_scheduler_enabled   = false
      service_scheduler_enabled = false
    }
  }
}

acl {
  enabled = true
  replication_token = "$replication_token"
}
EOF
)
  fi

  local client_config=""
  local nomad_helper="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/nomad-helper
  if [[ "$client" == "true" ]]; then
    local readonly docker_auth_config_path="$DOCKER_AUTH_CONFIG_FILE"
    log_info "Creating docker auth config file at $docker_auth_config_path"
    generate_docker_auth_config "$instance_region" "$docker_auth_config_path"

    local meta_block=$("$nomad_helper" meta --indent 2 "$meta")
    local host_volumes_stanzas=$("$nomad_helper" host-volumes --indent 2 "$host_volumes")
    client_config=$(cat <<EOF
client {
  enabled = true
  node_class = "$node_class"
  chroot_env {
    "/etc"                  = "/etc"
    "/bin"                  = "/bin"
    "/sbin"                 = "/sbin"
    "/lib/x86_64-linux-gnu" = "/lib/x86_64-linux-gnu"
    "/lib64"                = "/lib64"
    "/usr/bin"              = "/usr/bin"
    "/usr/lib"              = "/usr/lib"
    "/usr/sbin"             = "/usr/sbin"
    "/usr/local"            = "/usr/local"
    "/run/resolvconf"       = "/run/resolvconf"
    "/run/systemd/resolve"  = "/run/systemd/resolve"
  }
$meta_block
$host_volumes_stanzas
}

acl {
  enabled = true
}

plugin "raw_exec" {
  config {
    enabled = true
  }
}

plugin "docker" {
  config {
    auth {
      config = "$docker_auth_config_path"
    }
    gc {
      image       = true
      image_delay = "1h"
      container   = true
    }
    volumes {
      enabled = true
    }
    logging {
      type = "json-file"
      config {
        max-size = "256m"
        max-file = "2"
      }
    }
  }
}
EOF
)
  fi

  log_info "Creating default Nomad config file in $config_path"
  cat > "$config_path" <<EOF
disable_update_check = true

leave_on_terminate = true

data_dir   = "$data_dir"
region     = "$instance_region"
datacenter = "$availability_zone"
name       = "$instance_id"
bind_addr  = "0.0.0.0"

advertise {
  http = "$instance_ip_address"
  rpc  = "$instance_ip_address"
  serf = "$instance_ip_address"
}

consul {
  address = "127.0.0.1:8500"
}

telemetry {
  prometheus_metrics = true
}

$client_config
$server_config
EOF
  chown "$user:$user" "$config_path"
}

# Systemd service file based on:
# https://github.com/hashicorp/nomad/blob/master/dist/systemd/nomad.service
function generate_systemd_config {
  local readonly username="$1"
  local readonly bin_dir="$2"
  local readonly config_dir="$3"

  local readonly nomad_binary_path="$bin_dir/nomad"

  log_info "Installing Nomad systemd service"
  cat > /etc/systemd/system/nomad.service <<EOF
[Unit]
Description=Nomad by HashiCorp
Documentation=https://nomadproject.io/docs/
Wants=network-online.target
After=network-online.target
# We run Consul on every Nomad node.
Wants=consul.service
After=consul.service
StartLimitBurst=3
StartLimitIntervalSec=10

[Service]
User=$username
Group=$username
KillMode=process
KillSignal=SIGTERM
ExecStart=$nomad_binary_path agent -config=$config_dir
ExecReload=/bin/kill -HUP \$MAINPID
Restart=on-failure
RestartSec=2
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOF
}

function start_nomad {
  log_info "Starting Systemd Nomad service"
  systemctl daemon-reload
  systemctl enable nomad.service
  systemctl start nomad.service
}

# =============================================================================

function run {
  local server="false"
  local client="false"
  local num_servers=""
  local scheduler_algorithm="binpack"
  local authoritative_region=""
  local node_class=""
  local user=""
  local meta=""
  local host_volumes=""

  local readonly bin_dir="$NOMAD_INSTALL_PATH/bin"
  local readonly config_dir="$NOMAD_INSTALL_PATH/config"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --server)
        server="true"
        ;;
      --client)
        client="true"
        ;;
      --num-servers)
        num_servers="$2"
        shift
        ;;
      --scheduler-algorithm)
        scheduler_algorithm="$2"
        shift
        ;;
      --authoritative-region)
        authoritative_region="$2"
        shift
        ;;
      --node-class)
        node_class="$2"
        shift
        ;;
      --meta)
        meta="$2"
        shift
        ;;
      --host-volumes)
        host_volumes="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ "$server" == "true" ]]; then
    assert_not_empty "--num-servers" "$num_servers"
  fi

  if [[ "$server" == "false" && "$client" == "false" ]]; then
    log_error "At least one of --server or --client must be set"
    exit 1
  fi

  # Nomad clients make use of operating system primitives for resource isolation that require elevated (root) permissions,
  # Nomad servers don't need root-level privileges.
  if [[ "$client" == "true" ]]; then
    user="root"
  else
    user="$NOMAD_USER"
  fi

  assert_is_installed "aws"
  assert_is_installed "curl"
  assert_is_installed "jq"

  local readonly data_dir=$(prepare_nomad_data_dir "$user")

  generate_nomad_config "$server" "$client" "$num_servers" "$scheduler_algorithm" "$authoritative_region" "$node_class" "$config_dir" "$data_dir" "$user" "$meta" "$host_volumes"
  generate_systemd_config "$user" "$bin_dir" "$config_dir"

  start_nomad
}

run "$@"
